0) Reduce compile time? not really required for now. But is theorically possible,
most methods works on the type std::type_index rather than a generic type T, so
much of the logic can be moved to a NON-templated class. This will be done
without breaking existing interface of course. but not now. There are most
interesting things to do than refactoring what is currently working very nice:)

1)
Exceptions are just temporary.

In future exception messages will look like:
"Cannot wire constructor for FooBar, because type 'FooBar' was not bound 
(to bind a type use Infector::Container.bind...< ... >() )"

or
"Cannot build FooBar, an exception was thrown by its constructor"


2)
Custom allocation:
When A dependends on B and B depends on C the smartest way to allocate A is by
reserving a memory chunk of lenght A+B+C (Eventually alignin it) and then 
constructing A,B,C using the placement new 

raw chunk:
|---------------------------|
after placement new:
|-A-|-------B-------|---C---|

The natural way to do this construction is to use the evaluation order of 
constructors that make implemenation easy (and possibly fast).

This require a new smart pointer ( shared_ptr and unique_ptr provides some
mechanism for custom deleters, but that's expensive).

And the name for the new pointer will be ..

infect_ptr ?

then infect_ptr will be a "replacement"  for unique_ptr
(maybe inject_ptr is better name XD)

3)
Construct arrays of objects? (it's implicit that "Single" types can't be 
costructed into arrays, so there will not be "buildSingleArray" in any case).

auto myArray = ioc.buildArray<IFoo>(50); 

for(int i=0; i<50; i++)
 myArray[i]; //would that be usefull? would that be misused?


4) hierarchical containers (HC)
Actually multiple containers are possible, but each container don't
see each other... Then provide a hierachical structure where
children can see dependencies of parents? (or eventually change them?)
Or better some dependencies may be hided by a internal container
so that private stuff can't be accidentally injected (usefull for
bit projects and allows a primitive form of contextual binding)

Would that be usefull for someone?

